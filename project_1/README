Μέλλιου Αικατερίνη 1115 2007 00 095
Προγραμματισμός Συστήματος
Άσκηση 1η

1. Ανάπτυξη
	
	Η εργασία αναπτύχθηκε σε C με CLion της JetBrains και δοκιμάστηκε σε ubuntu (14.04 και 16.04) με valgrind και τα μηχανήματα της σχολής.

2. Γενική Δομή

	Το project werhauz υλοποιεί δύο hash tables και ένα max heap tree. Όλες οι βασικές εντολές που ζητήθηκαν είναι λειτουργικές.

Α. Hash Table (HashTable.c/.h, HashFunction.c/.h)

	Κάθε hash table είναι μία δομή που αποτελείται από 2 ακέραιους (το πεδίου βάσει του οποίου γίνεται η ταξινόμηση και το πλήθος των buckets) και έναν πίνακα από δείκτες σε buckets. Κάθε bucket είναι μία δομή 2 ακεραίων (μέγιστο πλήθος εγγραφών και τρέχον πλήθος εγγραφών), ένα δείκτη σε overflow bucket και ένα πίνακα δεικτών σε entries. Κάθε entry είναι μία δομή μίας συμβολοσειράς (το νούμερο του caller ή του callee, ανάλογα με το πεδίο hash) και ενός δείκτη σε λίστα εγγραφών CDR. Συνοδεύονται από συναρτήσεις δημιουργείας, εκτύπωσης, διαγραφής του hashtable μόνο, διαγραφής του hashtable και όλων των λιστών εγγραφών. Η συνάρτηση κατακερματισμού εξάγει τον αντίστοιχο ακέραιο από τη συμβολοσειρά καλούντα ή καλούμενου και βρίσκει το υπόλοιπο αυτού με το πλήθος των buckets κάθε hashtable.

Β. Λίστες εγγραφών CDR (CallRecord.c/.h, RecordList.c/.h)

	Οι λίστες εγγραφών είναι διπλά συνδεδεμένες λίστες και υλοποιούνται με δύο δομές, μία λίστας, με δείκτες σε κεφαλή και ουρά, και μία κόμβου, με δείκτες σε προηγούμενο και επόμενο κόμβο και δείκτη σε εγγραφή CDR. Κάθε εγγραφή είναι επίσης μια δομή με τα αντίστοιχα πεδία. Οι εγγραφές δεν αποθηκεύονται σε συγκεκριμένη δομή, απλώς καταλαμβάνουν τον επόμενο διαθέσιμο χώρο. Συνοδεύονται από συναρτήσεις δημιουργείας, διαγραφής και εκτύπωσης και αφαίρεσης κόμβου.

Γ. Max Heap Tree (MaxHeapTree.c/.h)

	Το max heap tree ακολουθεί την κλασσική υλοποίηση ενός δυαδικού δέντρου. Το δέντρο είναι μία δομή που αποτελείται από δείκτη στη ρίζα του δέντρου, ακέραιο με το ύψος του δέντρου μειωμένο κατά 1 και δείκτη στον επόμενο γονιό που έχει διαθέσιμες θέσεις για εισαγωγή κόμβου, ούτως ώστε να παραμένει ισορροπημένο. Κάθε κόμβος είναι επίσης δομή που περιέχει δείκτη στο γονιό του, δείκτη σε δεξί και αριστερό παιδί, συμβολοσειρά με τον αριθμό του συνδρομητή και διπλής ακρίβειας αριθμό για την αποθήκευση της συνολικής συνεισφοράς του στο εισόδημα της εταιρείας. Συνοδεύονται από συναρτήσεις δημιουργείας, διαγραφής, εκτύπωσης, εύρεσης συνδρομητή εντός του δέντρου, εύρεσης κατάλληλου γονιού για εισαγωγή και εναλλαγής κόμβων για διατήρηση της ιδιότητας max heap.  
	
3. Λειτουργικότητα και Δευτερεύουσες Δομές

Α. Μεταγλώτισση και Εκκίνηση  (Makefile, main.c, Global.c/.h)

	Η μεταγλώττιση και σύνδεση γίνεται από το τερματικό με την εντολή "make werhauz". Για την εκκίνηση του προγράμματος η γενική μορφή της κλήσης είναι "./werhauz -o Operations -h1 Hashtable1NumOfEntries -h2 Hashtable2NumOfEntries -s BucketSize -c config-file -p PriceList". Κανένα όρισμα δεν είναι υποχρεωτικό, σε περίπτωσης απουσίας ο χρήστης θα ερωτηθεί αργότερα για τα h1, h2, s και p. Δεν έχει υλοποιηθεί η περίπτωση -c. Μετά την ενημέρωση των αναγκαίων μεταβλητών δημιουργούνται οι κύριες δομές (hash1, hash2, tree) και μια global δομή που διατηρεί δείκτες στις τρεις κύριες δομές, το ισχύον τιμολόγιο και τα συνολικά έσοδα της εταιρείας. Έπειτα, αν έχει δοθεί operations file, εκτελούνται οι εντολές από το αρχείο και, τέλος, αναμένεται επιπλέον είσοδος απο τη γραμμή εντολών. Για την έξοδο από το πρόγραμμα δίνεται η εντολή exit.

Β. Είσοδος από το Χρήστη και Διαχείριση εγγραφών (UserInput.c/.h, RecordManagement.c/.h)

	Η είσοδος θεωρείται τυποποιημένη για τις εντολές του werhauz και την μορφη του τιμολογίου. To UserInput περιέχει συναρτήσεις για την ανάγνωση των αντίστοιχων αρχείων και την είσοδο από το τερματικό. Εντός ReadFromStandard γίνεται η αναγνώριση της εντολής και καλούνται οι κατάλληλες συναρτήσεις. Το RecordManagement αρχείο παρέχει συναρτήσεις εισαγωγής, αφαίρεσης και αναζήτησης από πίνακες κατακερματισμού και δέντρο.	

Γ. Στατιστικά στοιχεία και οι αντίστοιχες δομές (MaxHeapTree.c/.h, Statistics,c/.h, Subscriber.c/.h)

	Το MaxHeapTree υλοποιείται ως δυαδικό δέντρο. Σε κάθε εισαγωγή, ο νέος κόμβος ταξιδεύει προς τη ρίζα (BubbleUp) έως ότου ικανοποιείται η ιδιότητα του  max heap, ο γονιός να έχει μεγαλύτερο gain από τα παιδιά του. Επίσης, για να διατηρείται το δέντρο ισορροπημένο, παρέχεται συνάρτηση εύρεσης του επόμενου διαθέσιμου γονιού. Το MaxHeapTree χρησιμοποιείται για τις εντολές top και topdest. Οι ζητούμενοι κόμβοι ανασύρονται με οριζόντια εκτύπωση των επιπέδων. Όσον αφορά την indist, δημιουργούνται λίστες από subscribers στις οποίες εφαρμόζονται συναρτήσεις θεωρίας συνόλων.

4. Εξωτερικές πηγές κώδικα

* https://linuxprograms.wordpress.com/2012/06/22/c-getopt_long_only-example-accessing-command-line-arguments/ -> main.c -> σημαίες ορισμάτων με περισσότερους του ενός χαρακτήρων.
* Makefile -> όπως είχε δοθεί στην Υλοποίηση Συστημάτων Βάσεων Δεδομένων
* http://quiz.geeksforgeeks.org/print-level-order-traversal-line-line/ -> Statistics.c -> Οριζόντια εκτύπωση δέντρου
* http://stackoverflow.com/questions/2396623/remove-new-line-character-in-c -> UserInput.c -> αφαίρεση αλλαγής γραμμής από το τέλος συμβολοσειράς για την είσοδο από το τερματικό
* Υλοποίηση Συστημάτων Βάσεων Δεδομένων -> UserInput.c ->  άνοιγμα αρχείου και διάβασμα γραμμή-γραμμή
* https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm -> UserInput.c ->  χρήση της συνάρτησης strtok

